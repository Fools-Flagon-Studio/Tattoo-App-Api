const { DataTypes, Sequelize } = require("sequelize");
const db = require("./../../server");
const Users = require("./../shared/Users");
const VerificationApplications = require("./VerificationApplications");

const ArtistProfiles = db.define(
  "artistProfiles",
  {
    userId: {
      type: DataTypes.BIGINT,
      primaryKey: true,
      allowNull: false,
      validate: {
        notNull: {
          msg: "An profile must be linked to a user account",
        },
      },
      references: {
        model: Users,
        key: "id",
      },
      onDelete: "CASCADE",
    },
    publicId: {
      type: DataTypes.UUID,
      defaultValue: DataTypes.UUIDV4,
      unique: true,
      allowNull: false,
    },
    displayName: {
      type: DataTypes.TEXT,
      allowNull: false,
      unique: true,
      validate: {
        notNull: {
          msg: "Must provide a display name",
        },
        len: {
          args: [3, 50],
          msg: "Display name must be between 3 and 50 characters.",
        },
      },
    },
    bio: {
      type: DataTypes.TEXT,
      allowNull: true,
      validate: {
        len: {
          args: [0, 1000],
          msg: "Bio cannot exceed 1000 characters.",
        },
      },
    },
    commissionStatus: {
      type: DataTypes.ENUM("open", "closed", "byRequest"),
      allowNull: false,
      defaultValue: "closed",
      validate: {
        notNull: {
          msg: "Commission status is required.",
        },
        isIn: {
          args: [["open", "closed", "byRequest"]],
          msg: "Invalid commission status. Must be 'open', 'closed', or 'byRequest'.",
        },
      },
    },
    stylesOffered: {
      type: DataTypes.ARRAY(DataTypes.TEXT),
      allowNull: false,
      defaultValue: [],
      validate: {
        isStringArray(value) {
          if (!Array.isArray(value)) {
            throw new Error("Styles offered must be an array.");
          }
          for (const item of value) {
            if (typeof item !== "string" || item.trim().length === 0) {
              throw new Error("All styles must be non-empty strings.");
            }
          }
        },
        maxItems: {
          args: [15],
          msg: "Cannot list more than 15 styles.",
        },
      },
    },
    paymentPlatformId: {
      type: DataTypes.TEXT,
      allowNull: true,
      unique: true,
    },
    socialMediaLinks: {
      type: DataTypes.JSONB,
      allowNull: false,
      defaultValue: {},
    },
    profilePictureUrl: {
      type: DataTypes.TEXT,
      allowNull: false,
      defaultValue: "www.defaultpfp.com",
      validate: {
        isUrl: { msg: "Profile picture URL must be a valid URL." },
        notNull: { msg: "Profile picture URL is required." },
      },
    },
    city: {
      type: DataTypes.STRING,
      allowNull: false,
      validate: {
        notNull: { msg: "City is required." },
        notEmpty: { msg: "City cannot be empty." },
      },
    },
    state: {
      type: DataTypes.STRING,
      allowNull: false,
      validate: {
        notNull: { msg: "State is required." },
        notEmpty: { msg: "State cannot be empty." },
        len: { args: [2, 2], msg: "State must be a 2-letter abbreviation." },
        isIn: {
          args: [
            [
              "AL",
              "AK",
              "AS",
              "AZ",
              "AR",
              "CA",
              "CO",
              "CT",
              "DE",
              "DC",
              "FM",
              "FL",
              "GA",
              "GU",
              "HI",
              "ID",
              "IL",
              "IN",
              "IA",
              "KS",
              "KY",
              "LA",
              "ME",
              "MH",
              "MD",
              "MA",
              "MI",
              "MN",
              "MS",
              "MO",
              "MT",
              "NE",
              "NV",
              "NH",
              "NJ",
              "NM",
              "NY",
              "NC",
              "ND",
              "MP",
              "OH",
              "OK",
              "OR",
              "PW",
              "PA",
              "PR",
              "RI",
              "SC",
              "SD",
              "TN",
              "TX",
              "UT",
              "VT",
              "VI",
              "VA",
              "WA",
              "WV",
              "WI",
              "WY",
            ],
          ],
          msg: "Invalid state",
        },
      },
    },
    zipcode: {
      type: DataTypes.STRING,
      allowNull: false,
      validate: {
        notNull: { msg: "Zipcode is required." },
        notEmpty: { msg: "Zipcode cannot be empty." },
        is: {
          args: /^\d{5}(-\d{4})?$/,
          msg: "Invalid zipcode format.",
        },
      },
    },
    location: {
      type: DataTypes.GEOGRAPHY("POINT"),
      allowNull: true,
      get() {
        const value = this.getDataValue("location");
        return value ? value.coordinates : null;
      },
      set(value) {
        this.setDataValue(
          "location",
          Sequelize.fn(
            "ST_SetSRID",
            Sequelize.fn("ST_MakePoint", value.lng, value.lat),
            4326
          )
        );
      },
    },
    isVerified: {
      type: DataTypes.BOOLEAN,
      defaultValue: false,
      allowNull: false,
    },
    currentVerificationApplicationId: {
      type: DataTypes.BIGINT,
      allowNull: true,
      references: {
        model: VerificationApplications,
        key: "id",
      },
    },
    totalCommissionsCompleted: {
      type: DataTypes.INTEGER,
      defaultValue: 0,
      allowNull: false,
      validate: {
        min: 0,
        isInt: true,
      },
    },
    totalRevenueEarned: {
      type: DataTypes.DECIMAL(10, 2),
      defaultValue: 0.0,
      allowNull: false,
      validate: {
        isDecimal: true,
        min: 0.0,
      },
    },
    currencyCode: {
      type: DataTypes.STRING,
      allowNull: false,
      defaultValue: "USD",
      validate: {
        notNull: { msg: "Currency code is required." },
        isIn: {
          args: [
            [
              "AED",
              "AFN",
              "ALL",
              "AMD",
              "ANG",
              "AOA",
              "ARS",
              "AUD",
              "AWG",
              "AZN",
              "BAM",
              "BBD",
              "BDT",
              "BGN",
              "BHD",
              "BIF",
              "BMD",
              "BND",
              "BOB",
              "BOV",
              "BRL",
              "BSD",
              "BTN",
              "BWP",
              "BYR",
              "BZD",
              "CAD",
              "CDF",
              "CHE",
              "CHF",
              "CHW",
              "CLF",
              "CLP",
              "CNY",
              "COP",
              "COU",
              "CRC",
              "CUC",
              "CUP",
              "CVE",
              "CZK",
              "DJF",
              "DKK",
              "DOP",
              "DZD",
              "EGP",
              "ERN",
              "ETB",
              "EUR",
              "FJD",
              "FKP",
              "GBP",
              "GEL",
              "GHS",
              "GIP",
              "GMD",
              "GNF",
              "GTQ",
              "GYD",
              "HKD",
              "HNL",
              "HRK",
              "HTG",
              "HUF",
              "IDR",
              "ILS",
              "INR",
              "IQD",
              "IRR",
              "ISK",
              "JMD",
              "JOD",
              "JPY",
              "KES",
              "KGS",
              "KHR",
              "KMF",
              "KPW",
              "KRW",
              "KWD",
              "KYD",
              "KZT",
              "LAK",
              "LBP",
              "LKR",
              "LRD",
              "LSL",
              "LTL",
              "LVL",
              "LYD",
              "MAD",
              "MDL",
              "MGA",
              "MKD",
              "MMK",
              "MNT",
              "MOP",
              "MRO",
              "MUR",
              "MVR",
              "MWK",
              "MXN",
              "MXV",
              "MYR",
              "MZN",
              "NAD",
              "NGN",
              "NIO",
              "NOK",
              "NPR",
              "NZD",
              "OMR",
              "PAB",
              "PEN",
              "PGK",
              "PHP",
              "PKR",
              "PLN",
              "PYG",
              "QAR",
              "RON",
              "RSD",
              "RUB",
              "RWF",
              "SAR",
              "SBD",
              "SCR",
              "SDG",
              "SEK",
              "SGD",
              "SHP",
              "SLL",
              "SOS",
              "SRD",
              "SSP",
              "STD",
              "SYP",
              "SZL",
              "THB",
              "TJS",
              "TMT",
              "TND",
              "TOP",
              "TRY",
              "TTD",
              "TWD",
              "TZS",
              "UAH",
              "UGX",
              "USD",
              "USN",
              "USS",
              "UYI",
              "UYU",
              "UZS",
              "VEF",
              "VND",
              "VUV",
              "WST",
              "XAF",
              "XAG",
              "XAU",
              "XBA",
              "XBB",
              "XBC",
              "XBD",
              "XCD",
              "XDR",
              "XFU",
              "XOF",
              "XPD",
              "XPF",
              "XPT",
              "XTS",
              "XXX",
              "YER",
              "ZAR",
              "ZMW",
            ],
          ],
          msg: "Invalid currency code. Please use a valid ISO 4217 code (e.g., 'USD').",
        },
      },
    },
    averageRating: {
      type: DataTypes.DECIMAL(2, 1),
      defaultValue: 0.0,
      allowNull: false,
      validate: {
        isDecimal: true,
        min: 0.0,
        max: 5.0,
      },
    },
    searchVector: {
      type: DataTypes.TSVECTOR,
      allowNull: true,
    },
    totalViews: { 
      type: DataTypes.INTEGER,
      defaultValue: 0,
      allowNull: false,
      validate: { min: 0, isInt: true } 
    },
    totalFollowers: { 
      type: DataTypes.INTEGER,
      defaultValue: 0,
      allowNull: false,
      validate: { min: 0, isInt: true } 
    },
    lastActivityAt: { 
      type: DataTypes.DATE,
      allowNull: true,
    }
  },
  { timestamps: true }
);

module.exports = ArtistProfiles;
